<% if (admin) { %>import AdminBroExpress from '@admin-bro/express';
<% } %><% if (sentry) { %>import * as Sentry from '@sentry/node';
<% } %><% if (admin) { %>import AdminBro from 'admin-bro';
<% } %>import bodyParser from 'body-parser';
import compression from 'compression';
import cors from 'cors';
import express, { Application } from 'express';
import rateLimit from 'express-rate-limit';<% if (monitoring) { %>
import statusMonitor from 'express-status-monitor';<% } %>
import helmet from 'helmet';
import { Server } from 'http';
import { TooManyRequests } from 'http-errors';<% if (i18n) { %>
import { i18n as I18n } from 'i18next';
import i18nHttpMiddleware from 'i18next-http-middleware';<% } %>
import path from 'path';
import 'reflect-metadata';
import favicon from 'serve-favicon';<% if (monitoring && socketIo) { %>
import SocketIO from 'socket.io';<% } %>
import { Container } from 'typedi';<% if (winston) { %>
import { Logger } from 'winston';<% var loggerType = 'Logger'; %><% } else { %><% var loggerType = 'Console'; %><% } %>
import config from './config';
import {<% if (celebrate) { %>
  celebrateErrorParser,<% } %>
  errorLogger,
  httpErrorHandler,<% if (jwt) { %>
  jwtErrorParser,<% } %><% if (sequelize) { %>
  sequelizeErrorParser,<% } %>
} from './middlewares';
import router from './routes';

export default (app: Application, server: Server): void => {
  const logger = Container.get<<%= loggerType %>>('logger');<% if (admin) { %>
  const adminBro = Container.get<AdminBro>('adminBro');<% } %><% if (i18n) { %>
  const i18n = Container.get<I18n>('i18n');<% } %>

  app.enable('trust proxy');
  app.use(bodyParser.json());
  app.use(compression());
  app.use(cors());
  app.use(helmet());

  // Rate limiting configuration
  app.use(
    rateLimit({
      windowMs: 10 * 60 * 1000, // 10 minutes
      max: 100, // limit each IP to 100 requests per windowMs
      message: <% if (i18n) { %>i18n.t('errors:tooManyRequests')<% } else { %>'Too many requests, please try again later.'<% } %>,
      statusCode: new TooManyRequests().statusCode,
      skip: () => !config.isProduction,
    }),
  );<% if (monitoring) { %>

  // Status monitoring configuration
  app.use(
    statusMonitor({
      path: '/status',
      title: '<%= name %> | Monitoring',<% if (socketIo) { %>
      websocket: Container.get<SocketIO.Server>('socket'),<% } %>
    }),
  );<% } %><% if (admin) { %>

  // AdminBro panel configuration
  app.use(config.admin.path, AdminBroExpress.buildRouter(adminBro));<% } %><% if (sentry) { %>

  // Sentry middleware configuration
  app.use(Sentry.Handlers.requestHandler());
  app.use(Sentry.Handlers.tracingHandler());<% } %><% if (i18n) { %>

  // i18n middleware configuration
  app.use(i18nHttpMiddleware.handle(i18n));
  app.use((req, res, next) => {
    if (req.i18n) {
      Container.set('i18n', req.i18n);
    }

    next();
  });<% } %><% if (openapi) { %>

  // API documentation
  app.use('/doc', express.static(path.resolve(`${__dirname}/public/doc`)));<% } %>

  // Public assets
  app.use('/public', express.static(path.resolve(`${__dirname}/public`)));
  app.use(favicon(path.resolve(`${__dirname}/public/favicon.ico`)));<% if (sentry) { %>

  // Sentry debug route
  app.get('/sentry-debug', () => {
    throw new Error('Sentry error');
  });<% } %>

  // Health route
  app.get('/health', (req, res) => res.sendStatus(204));

  // Routing configuration
  app.use(router);

  // Error handling<% if (jwt) { %>
  app.use(jwtErrorParser());<% } %><% if (celebrate) { %>
  app.use(celebrateErrorParser());<% } %><% if (sequelize) { %>
  app.use(sequelizeErrorParser());<% } %>
  app.use(errorLogger());<% if (sentry) { %>
  app.use(Sentry.Handlers.errorHandler());<% } %>
  app.use(httpErrorHandler());

  // Start listening on configured port
  server
    .listen(config.port, () => {
      logger.info(`App is running on port ${config.port} in ${config.env} mode`);
    })
    .on('error', err => {
      logger.error('%o', err);

      process.exit(1);
    });

  // Handle uncaught exceptions
  process.on('uncaughtException', err => {
    <% if (sentry) { %>Sentry.captureException(err);<% } else { %>logger.error('Uncaught exception - %o', err);<% } %>

    process.exit(1);
  });

  // Catch unhandled promise rejections
  process.on('unhandledRejection', err => {
    <% if (sentry) { %>Sentry.captureException(err);<% } else { %>logger.error('Unhandled rejection - %o', err);<% } %>
  });
};
