import bcrypt from 'bcryptjs';
import { BadRequest } from 'http-errors';<% if (i18n) { %>
import { i18n as I18n } from 'i18next';<% } %>
import {
  AllowNull,
  BeforeValidate,
  Column,
  Comment,
  CreatedAt,
  DataType,
  Default,
  Model,
  PrimaryKey,
  Table,
  Unique,
} from 'sequelize-typescript';<% if (i18n) { %>
import Container from 'typedi';<% } %><% if (jwt) { %>
import { generateSignedJWT } from '../utils/jwt';<% } %>

@Table({
  tableName: 'user',
})
export default class UserModel extends Model<UserModel> {
  //
  // ─── MODEL ATTRIBUTES ───────────────────────────────────────────────────────────
  //

  @PrimaryKey
  @AllowNull(false)
  @Comment('ID of the user')
  @Default(DataType.UUIDV4)
  @Column(DataType.UUID)
  id!: string;

  @AllowNull(false)
  @Comment('First name of the user')
  @Column(DataType.STRING(64))
  firstName!: string;

  @AllowNull(false)
  @Comment('Last name of the user')
  @Column(DataType.STRING(64))
  lastName!: string;

  @Unique
  @AllowNull(false)
  @Comment('Email of the user')
  @Column(DataType.STRING(128))
  email!: string;

  @AllowNull(false)
  @Comment('Password of the user')
  @Column(DataType.STRING(64))
  password!: string;

  @CreatedAt
  @AllowNull(false)
  @Comment("Date and time of the user's profile creation date")
  @Column(DataType.DATE)
  createdAt!: string;

  //
  // ─── VIRTUAL ATTRIBUTES ─────────────────────────────────────────────────────────
  //

  @Column(DataType.VIRTUAL)
  get fullName(): string {
    return `${this.getDataValue('firstName')} ${this.getDataValue('lastName')}`;
  }

  //
  // ─── MODEL ASSOCIATIONS ─────────────────────────────────────────────────────────
  //

  //
  // ─── MODEL HOOKS ────────────────────────────────────────────────────────────────
  //

  @BeforeValidate
  static async validateUserFields(user: UserModel): Promise<void> {<% if (i18n) { %>
    const i18n = Container.get<I18n>('i18n');
<% } %>
    // If `email` property changed
    if (user.changed('email')) {
      const email = user.getDataValue('email');
      const emailCount = await UserModel.count({ where: { email } });

      if (emailCount > 0) {
        throw new BadRequest(<% if (i18n) { %>i18n.t('errors:emailAlreadyUsed', { email })<% } else { %>`The email address ${email} is already in use.`<% } %>);
      }
    }

    // If `password` property changed
    if (user.changed('password')) {
      const password = user.getDataValue('password');
      const hash = await UserModel.generateHash(password);

      user.setDataValue('password', hash);
    }

    await user.save({ validate: false });
  }

  //
  // ─── CUSTOM METHODS ─────────────────────────────────────────────────────────────
  //

  /**
   * Returns a hashed version of the given `password`.
   */
  static async generateHash(password: string): Promise<string> {
    return bcrypt.hash(password, 10);
  }

  /**
   * Returns `true` if `password` matches the user's password, `false` otherwise.
   */
  async comparePassword(password: string): Promise<boolean> {
    const hash = this.getDataValue('password');

    return bcrypt.compare(password, hash);
  }<% if (jwt) { %>

  /**
   * Returns a new JWT for this user.
   */
  generateJWT(): string {
    return generateSignedJWT(this.id, this.password, {
      name: this.fullName,
      email: this.email,
    });
  }<% } %>
}
