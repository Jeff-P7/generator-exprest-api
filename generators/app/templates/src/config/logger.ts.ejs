<% if (winston) { -%>
import { existsSync, mkdirSync } from 'fs';
import moment from 'moment';
import { createLogger, format, Logform, transports } from 'winston';<% if (sentry) { %>
import SentryTransport from 'winston-transport-sentry-node';<% } %>
import config from './index';

// Check if logs folder exists
if (!existsSync(config.logsDir)) {
  mkdirSync(config.logsDir);
}

const customFormat: Logform.Format = format.combine(
  format.errors({ stack: true }),
  format.metadata(),
  format.json(),
  format.splat(),
  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
);

// Configure logger
const logger = createLogger({
  level: config.debug ? 'debug' : 'info',
  transports: [
    new transports.Console({
      format: format.combine(
        format.colorize(),
        customFormat,
        format.printf(info => `${info.timestamp} ${info.level}: ${info.message}`),
      ),
    }),
    new transports.File({
      level: 'error',
      dirname: config.logsDir,
      filename: `${moment().format('YYYY-MM-DD')}-errors.log`,
    }),
  ],
  exitOnError: false,
});<% if (sentry) { %>

// If app is in in production mode, log errors to Sentry
if (config.isProduction) {
  logger.add(
    new SentryTransport({
      level: 'error',
      format: customFormat,
      sentry: config.sentry,
    }),
  );
}<% } %><% } else { %>const logger = console;<% } %>

export default logger;
